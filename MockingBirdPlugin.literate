# RenderEngine Integration In Rhino With The ChangeQueue

Rhino offers a mechanism to integrate render engines. The mechanism is called
the ChangeQueue. It is provided through what is called the Realtime RDK. The
central idea is to provide all Rhino data in a preprocessed form. This means
handling the block instances, prepare materials in case of different settings
for front and back facing parts of geometry and so on.

In this book we'll look at how one could go about integrating a new render
engine into Rhino using its RhinoCommon SDK.

We'll also see how a plug-in in general should be set up, what information is
needed. We will also be able to add some functionality during the load phase of
the plug-in.

When you get to the end of this book you should have a good understanding of the
Rhino plug-in base class. You will have read the entire code for a simple render
engine integration that shows the main mechanisms of the ChangeQueue from the
realtime render SDK.

There are several core parts to a render engine integration into Rhino: the main
plug-in, a render pipeline implementation for modal rendering, a ChangeQueue
implementation to process the document data, and for interactive rendering in
the viewport two classes to register with the viewport system and provide the
actual viewport display mode implementation.

We'll have a look at all parts the entire integration. For now we will start
with the top level implementation of the plug-in.

## The PlugIn Implementation

The main class for the plug-in is in `<<Mocking Bird Plug-in.*>>`. It derives
from `RenderPlugIn` and will override two functions. It will also provide the
implementation to handle thumbnail preview rendering. The thumbnails are created
for materials and environments.

The basis for the plug-in is:

```csharp : <<Mocking Bird Plug-in.*>>= ./MockingBirdPlugIn.cs
<<plugin imports>>
namespace MockingBird
{
    public class MockingBirdPlugIn : RenderPlugIn
    {
        <<plug-in constructor>>
        <<plug-in properties>>
        <<plug-in overrides>>
        <<plug-in private methods>>
    }
}
```

Lets first get the assembly information out of the way though. It is pretty much
like any regular other assembly information, except that there is a set of
attributes that communicate to Rhino the information it requires.

### Assembly Information

For the plug-in to be a proper RHP assembly we also need to add the necessary
assembly information, which we'll do with `<<AssemblyInfo.*>>`.

```csharp : <<AssemblyInfo.*>>= ./AssemblyInfo.cs
<<assembly info imports>>
<<plug-in description>>
<<assembly information>>
<<assembly GUID>>
<<plug-in version>>
```

The assembly information carries the plug-in developer information, like the
address, organization, website and so on. This information is given through the
`PlugInDescription` attribute from the `Rhino.PlugIns` namespace. The fields
have to exist, yet you need to enter only the data you really want to share. It
is a good idea to give users of your plug-in enough information for them to be
able to contact you in case they have feature requests, feedback or bug reports.

```csharp : <<plug-in description>>=
[assembly: PlugInDescription(DescriptionType.Address, "Turku")]
[assembly: PlugInDescription(DescriptionType.Country, "Finland")]
[assembly: PlugInDescription(DescriptionType.Email, "jesterking@letwory.net")]
[assembly: PlugInDescription(DescriptionType.Phone, "-")]
[assembly: PlugInDescription(DescriptionType.Fax, "-")]
[assembly: PlugInDescription(DescriptionType.Organization, "Letwory Interactive")]
[assembly: PlugInDescription(DescriptionType.UpdateUrl, "-")]
[assembly: PlugInDescription(DescriptionType.WebSite, "https://letworyinteractive.com")]
```

To be able to use the attribute we'll import `Rhino.PlugIns` here:

```csharp : <<assembly info imports>>=
using Rhino.PlugIns;
```

Apart from these developer fields the assembly needs to be tagged with the
necessary attributes. Fill out as much information as possible for completeness.

```csharp : <<assembly information>>=
[assembly: AssemblyTitle("Mocking Bird")] // Plug-In title is extracted from this
[assembly: AssemblyDescription("A sample render plug-in for Rhinoceros")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Letwory Interactive")]
[assembly: AssemblyProduct("Mocking Bird")]
[assembly: AssemblyCopyright("Copyright ©  2016-2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
[assembly: ComVisible(false)]
```

These attributes need also their namespaces, so lets add them to the `<<assembly info imports>>`:

```csharp : <<assembly info imports>>=+
using System.Reflection;
using System.Runtime.InteropServices;
```

There are still two pieces to the plug-in assembly information we need to
provide. The first is the GUID of the plug-in. This will be used to uniquely
identify plug-ins in the Rhino eco-system. There can be only one plug-in with
this GUID. If Rhino detects multiple plug-ins with the same GUID only the first
one found and loaded will remain in Rhino, the others with the same GUID will be
ignored. Rhino **will** prompt with an error dialog.

The GUID of the plug-in has to be different from any other plug-in, so when you
create your own plug-in make sure you don't copy and paste the one used in this
book.

```csharp : <<assembly GUID>>=
[assembly: Guid("ccb6ab63-fdef-44ac-9c1f-7eca810d5b75")]
```

Finally the version number of the plug-in. This number should be bumped with
each new release.

```csharp : <<plug-in version>>=
[assembly: AssemblyVersion("0.9.1.0")]
[assembly: AssemblyFileVersion("0.9.1.0")]
```
### Plug-in Skeleton

With the assembly information in place we can focus on the plug-in. We'll be
going over the parts needed to make it a render plug-in.

We'll have a constructor added to `<<plug-in constructor>>` that sets up the
singleton pattern.

```csharp : <<plug-in constructor>>=
public MockingBirdPlugIn()
{
    if(Instance == null) Instance = this;
}
```

To be able to properly construct an instance we need to have at least the
`Instance` property available. We ensure that only in an instance we can set a
new value. In our case, as seen above we do that in the constructor.

```csharp : <<plug-in properties>>=
public static MockingBirdPlugIn Instance
{
    get; private set;
}
```

The important thing here is to ensure there will be only one plug-in instance
per Rhino process.

At this moment we're interested in two overrides, namely `Render` and
`RenderWindow`. These are entry functions for doing a modal render. We'll start
by setting this part of the render integration up. In later chapters we'll see
how to expand the plug-in to provide thumbnail previews and to have interactive
viewport rendering capabilities.

`Render` and `RenderWindow` are very closely related. For our plug-in we'll move
most of the code into a private function to handle the rendering part of the
plug-in. We'll get to it soon enough.

Both methods take a `RhinoDoc` instance. This is the document to be rendered.
We'll pass it off to the ChangeQueue mechanism before we start our render
engine. As second parameter a `Commands.RunMode` will tell whether the `_Render`
command was used interactively, i.e the user pressed a button, or whether it was
called as part of a macro or script.

Lets start with the `Render` method implementation. We'll keep it very light and
work out `<<modal render implementation>>` in a moment. We'll see that this and
`RenderWindow` are very similar. We'll take advantage from this.

```csharp : <<plug-in overrides>>=
protected override Result Render(RhinoDoc doc, RunMode mode, bool fastPreview)
{
    <<modal render implementation>>
}
```

`Result` and `RunMode` come both from the `Rhino.Commands` namespace, so let's
ensure we can use them. `RhinoDoc` comes from the `Rhino` namespace. We'll also
need `Rhino.PlugIns` and `Rhino.Render`;

```csharp : <<plugin imports>>=
using Rhino;
using Rhino.Commands;
using Rhino.PlugIns;
using Rhino.Render;
```

The second override that we want to introduce at this point is `RenderWindow`.
It has the same three first parameters as `Render`, but additionally there is a
`RhinoView` for the view to render from, in case it is different from the active
view. And there is a `Rectangle` that gives the area to render from the given
view. The last bool tells us whether the rendering should happen in the
viewport, or in a separate window.


```csharp : <<plug-in overrides>>=+
protected override Result RenderWindow(RhinoDoc doc, RunMode mode, bool fastPreview, RhinoView view, Rectangle rect, bool inWindow)
{
    <<render window implementation>>
}
```

We also want `RhinoView` from the namespace `Rhino.Display` and `Rectangle` from `System.Drawing`:

```csharp : <<plugin imports>>=+
using Rhino.Display;
using System.Drawing;
```

## Modal Rendering Setup

Modal rendering is also knows as production or off-line rendering. In Rhino a
modal rendering is started using the `_Render` command.

Both this method and the `RenderWindow` method are very similar. You'll see
there are minor differences in setting them up.

For the modal render case we set up a rectangle which encompasses the requested
full render size. The point is at 0, 0. The resolution is queried from the
document using `RenderPipeline.RenderSize`.

``` csharp : <<modal render implementation>>=
Rectangle rect = new Rectangle(new Point(0,0), RenderPipeline.RenderSize(doc, true));
return RenderWithMockingBird(doc, mode, rect, true);
```

## Window Rendering Setup

Window rendering is essentially a modal render, except the user is asked by
Rhino to draw a rectangle in the viewport of choice. This rectangle is the part
that will be rendered and shown either as an overlay on the viewport, or in a
separate render window like the one you get with `_Render`.

``` csharp : <<render window implementation>>=
return RenderWithMockingBird(doc, mode, rect, inWindow);
```

## RenderWithMockingBird

Both modal rendering entries we saw earlier use `RenderWithMockingBird` to set
up and execute the actual render.

Since Rhino 6 there is a helper class that should be used to acquire the correct
active view to render. `RenderSourceView` needs to be used in a `using`
construct to ensure proper disposing. Inside the `using` code block we'll
actually set up and execute our render.

```csharp : <<plug-in private methods>>=
private Result RenderWithMockingBird(RhinoDoc doc, RunMode mode, Rectangle rect, bool inWindow)
{
    var rc = RenderPipeline.RenderReturnCode.InternalError;
    using(var rsv = new RenderSourceView(doc)) {
        <<find view>>
        <<setup modal render engine>>
        <<initialize render pipeline>>
        <<engine creates world>>
        <<render modal or in view>>
        <<modal render clean-up>>

        return Result.Success;
    }
}
```

We have now the main structure for setup, render start and the clean-up at the
end. We need to get the correct view and the requested render resolution. If
`inWindow` is `true` we should use the size as given in `rect`. If it is `false`
we use the screen port size from the viewport. From the RenderSourceView we
first get the `ViewInfo` of the view we need to render. This in turn gives
access to the viewport through which we query for the screen port size.

```csharp : <<find view>>=
ViewInfo vi = rsv.GetViewInfo();
Size renderSize= inWindow ? rect.Size : vi.Viewport.GetScreenPort().Size;
```

Since `ViewInfo` is from the namespace `Rhino.DocObjects` we need to add it to `<<plugin imports>>`:

```csharp : <<plugin imports>>=+
using Rhino.DocObjects;
```

Then we should set up a pipeline. We'll look at the implementation of the
pipeline in a separate chapter. For now suffice to say that it is an
implementation derived from `Rhino.Render.RenderPipeline`.

```csharp : <<setup modal render engine>>=
/* setup modal render engine */
```

```csharp : <<initialize render pipeline>>=
/* initialize render pipeline */
```

```csharp : <<engine creates world>>=
/* engine creates world */
```

```csharp : <<render modal or in view>>=
/* render modal or in view */
```

```csharp : <<modal render clean-up>>=
/* modal render clean-up */
```